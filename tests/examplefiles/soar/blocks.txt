---input---
# Suggest MOVE-BLOCK operators
# This production proposes operators that move one block ontop of another block.  
# The conditions establish that:
#  1. The state has a problem-space named 'blocks'
#  2. The block moved and the block moved TO must be both be clear.
#  3. The block moved is different from the block moved to.
#  4. The block moved must be type block.
#  5. The block moved must not already be ontop the block being moved to.
# The actions:
#  1. create an acceptable preference for an operator.
#  2. create acceptable preferences for the substructure of the operator (its
#     name, its 'moving-block' and the 'destination).

sp {blocks-world*propose*move-block
   (state <s> ^problem-space blocks
              ^thing <thing1> {<> <thing1> <thing2>}
              ^ontop <ontop>)
   (<thing1> ^type block ^clear yes)
   (<thing2> ^clear yes)
   (<ontop> ^top-block <thing1>
            ^bottom-block <> <thing2>)
-->
   (<s> ^operator <o> +)
   (<o> ^name move-block
        ^moving-block <thing1>
        ^destination <thing2>)}

# Make all acceptable move-block operators also indifferent
# The conditions establish that:
#  1. the state has an acceptable preference for an operator
#  2. the operator is named move-block
# The actions:
#  1. create an indifferent prefererence for the operator

sp {blocks-world*compare*move-block*indifferent
   (state <s> ^operator <o> +)
   (<o> ^name move-block)
-->
   (<s> ^operator <o> =)}

---tokens---
'# Suggest MOVE-BLOCK operators' Comment.Single
'\n'          Text.Whitespace

'#'           Comment.Single
'\n'          Text.Whitespace

'# This production proposes operators that move one block ontop of another block.  ' Comment.Single
'\n'          Text.Whitespace

'# The conditions establish that:' Comment.Single
'\n'          Text.Whitespace

"#  1. The state has a problem-space named 'blocks'" Comment.Single
'\n'          Text.Whitespace

'#  2. The block moved and the block moved TO must be both be clear.' Comment.Single
'\n'          Text.Whitespace

'#  3. The block moved is different from the block moved to.' Comment.Single
'\n'          Text.Whitespace

'#  4. The block moved must be type block.' Comment.Single
'\n'          Text.Whitespace

'#  5. The block moved must not already be ontop the block being moved to.' Comment.Single
'\n'          Text.Whitespace

'# The actions:' Comment.Single
'\n'          Text.Whitespace

'#  1. create an acceptable preference for an operator.' Comment.Single
'\n'          Text.Whitespace

'#  2. create acceptable preferences for the substructure of the operator (its' Comment.Single
'\n'          Text.Whitespace

"#     name, its 'moving-block' and the 'destination)." Comment.Single
'\n\n'        Text.Whitespace

'sp'          Name
' '           Text.Whitespace
'{'           Punctuation
'blocks-world*propose*move-block' Name
'\n   '       Text.Whitespace
'('           Punctuation
'state'       Name
' '           Text.Whitespace
'<s>'         Name.Variable
' '           Text.Whitespace
'^'           Operator
'problem-space' Name
' '           Text.Whitespace
'blocks'      Name
'\n              ' Text.Whitespace
'^'           Operator
'thing'       Name
' '           Text.Whitespace
'<thing1>'    Name.Variable
' '           Text.Whitespace
'{'           Punctuation
'<>'          Operator
' '           Text.Whitespace
'<thing1>'    Name.Variable
' '           Text.Whitespace
'<thing2>'    Name.Variable
'}'           Punctuation
'\n              ' Text.Whitespace
'^'           Operator
'ontop'       Name
' '           Text.Whitespace
'<ontop>'     Name.Variable
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<thing1>'    Name.Variable
' '           Text.Whitespace
'^'           Operator
'type'        Name
' '           Text.Whitespace
'block'       Name
' '           Text.Whitespace
'^'           Operator
'clear'       Name
' '           Text.Whitespace
'yes'         Name
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<thing2>'    Name.Variable
' '           Text.Whitespace
'^'           Operator
'clear'       Name
' '           Text.Whitespace
'yes'         Name
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<ontop>'     Name.Variable
' '           Text.Whitespace
'^'           Operator
'top-block'   Name
' '           Text.Whitespace
'<thing1>'    Name.Variable
'\n            ' Text.Whitespace
'^'           Operator
'bottom-block' Name
' '           Text.Whitespace
'<>'          Operator
' '           Text.Whitespace
'<thing2>'    Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'-->'         Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<s>'         Name.Variable
' '           Text.Whitespace
'^'           Operator
'operator'    Name
' '           Text.Whitespace
'<o>'         Name.Variable
' '           Text.Whitespace
'+'           Operator
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<o>'         Name.Variable
' '           Text.Whitespace
'^'           Operator
'name'        Name
' '           Text.Whitespace
'move-block'  Name
'\n        '  Text.Whitespace
'^'           Operator
'moving-block' Name
' '           Text.Whitespace
'<thing1>'    Name.Variable
'\n        '  Text.Whitespace
'^'           Operator
'destination' Name
' '           Text.Whitespace
'<thing2>'    Name.Variable
')'           Punctuation
'}'           Punctuation
'\n\n'        Text.Whitespace

'# Make all acceptable move-block operators also indifferent' Comment.Single
'\n'          Text.Whitespace

'# The conditions establish that:' Comment.Single
'\n'          Text.Whitespace

'#  1. the state has an acceptable preference for an operator' Comment.Single
'\n'          Text.Whitespace

'#  2. the operator is named move-block' Comment.Single
'\n'          Text.Whitespace

'# The actions:' Comment.Single
'\n'          Text.Whitespace

'#  1. create an indifferent prefererence for the operator' Comment.Single
'\n\n'        Text.Whitespace

'sp'          Name
' '           Text.Whitespace
'{'           Punctuation
'blocks-world*compare*move-block*indifferent' Name
'\n   '       Text.Whitespace
'('           Punctuation
'state'       Name
' '           Text.Whitespace
'<s>'         Name.Variable
' '           Text.Whitespace
'^'           Operator
'operator'    Name
' '           Text.Whitespace
'<o>'         Name.Variable
' '           Text.Whitespace
'+'           Operator
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<o>'         Name.Variable
' '           Text.Whitespace
'^'           Operator
'name'        Name
' '           Text.Whitespace
'move-block'  Name
')'           Punctuation
'\n'          Text.Whitespace

'-->'         Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<s>'         Name.Variable
' '           Text.Whitespace
'^'           Operator
'operator'    Name
' '           Text.Whitespace
'<o>'         Name.Variable
' '           Text.Whitespace
'='           Operator
')'           Punctuation
'}'           Punctuation
'\n'          Text.Whitespace
